import logging
import re
import sqlite3
import datetime
import asyncio
import time
import os
import json
import sqlite3
import logging
from datetime import datetime, timedelta
from decimal import Decimal
import random
import string
import time
import aiosqlite
import requests
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from telethon import TelegramClient
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import (
    InputReportReasonSpam,
    InputReportReasonViolence,
    InputReportReasonPornography,
    InputReportReasonChildAbuse,
    InputReportReasonIllegalDrugs,
    InputReportReasonPersonalDetails,
    InputReportReasonOther
)
from telethon.tl.types import InputReportReasonSpam

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("Bot")

API_TOKEN = '8472304424:AAFL50Pqx7lqIDYtIVAxpMFAa2Op-lpxe1c'
CRYPTO_PAY_TOKEN = "440241:AAPmg4RbNjTvGaKb5AlSmh5fRmc2puJocEU"
API_ID = 25874957
API_HASH = 'c89ef6fd9ba5c8a479abb1f4d2de248d'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

ADMINS = [7021577409]
LOG_GROUP_ID = -1002515067063
CHANNEL_ID = -1002668805170

SUBSCRIPTION_PRICES = {
    'day': 1,
    'week': 2.5,
    'month': 5,
    'forever': 7
}
SUBSCRIPTION_DURATIONS = {
    'day': 1,
    'week': 7,
    'month': 30,
    'forever': None
}

reasons = {
    "1": (InputReportReasonSpam(), "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∞–º"),
    "2": (InputReportReasonViolence(), "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å–∏–ª–∏–µ."),
    "3": (InputReportReasonPornography(), "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—é."),
    "4": (InputReportReasonChildAbuse(), "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∂–µ—Å—Ç–æ–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –¥–µ—Ç—å–º–∏."),
    "5": (InputReportReasonIllegalDrugs(), "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏)."),
    "6": (InputReportReasonPersonalDetails(), "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."),
    "7": (InputReportReasonOther(), "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞.")
}

class Form(StatesGroup):
    waiting_for_demolition_link = State()
    waiting_for_reason = State()
    waiting_for_block_user_id = State()
    waiting_for_add_subscription = S—É  = State()
    waiting_for_add_subscription = State()
    waiting_for_remove_subscription = State()
    waiting_for_block_user_id = State()
    waiting_for_broadcast_message = State()
    waiting_for_support_message = State()
    in_support_dialog = State()

def get_db_connection():
    conn = sqlite3.connect("bot_users.db")
    conn.row_factory = sqlite3.Row  
    return conn


def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE NOT NULL,
        subscription_status TEXT DEFAULT 'none',
        subscription_expiry_date TEXT DEFAULT NULL,
        is_blocked INTEGER DEFAULT 0,
        demolition_count INTEGER DEFAULT 0,
        last_demolition INTEGER DEFAULT 0
    )
    """)
    conn.commit()
    conn.close()

def register_user_in_db(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (telegram_id) VALUES (?)", (user_id,))
        conn.commit()
    except sqlite3.IntegrityError:
        pass
    conn.close()

from datetime import datetime, timedelta

def activate_subscription(user_id, duration):
    conn = get_db_connection()
    cursor = conn.cursor()

    expiry_date = (datetime.now() + timedelta(days=duration)).strftime('%Y-%m-%d %H:%M:%S') if duration else None

    cursor.execute("""
        UPDATE users
        SET subscription_status = 'active',
            subscription_expiry_date = ?
        WHERE telegram_id = ?
    """, (expiry_date, user_id))
    
    conn.commit()
    conn.close()



def check_subscription(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT subscription_status, subscription_expiry_date FROM users WHERE telegram_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        status, expiry_date = result
        if status == 'active':
            if expiry_date is None:
                return True  
            try:
                expiry_datetime = datetime.strptime(expiry_date, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                expiry_datetime = datetime.strptime(expiry_date, '%Y-%m-%d')
            
            return expiry_datetime >= datetime.now()
    return False




@dp.message_handler(commands="start", state="*")
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state:
        await state.finish()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register_user_in_db(user_id)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ["member", "administrator", "creator"]:
            # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            main_menu = InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton(text="üç£ –ó–∞–∫–∞–∑–∞—Ç—å —Å—É—à–∏", callback_data="demolition"),
                InlineKeyboardButton("üìï –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="about_bot"),
                InlineKeyboardButton("üõçÔ∏è –¶–µ–Ω—ã –Ω–∞ —Å—É—à–∏", callback_data="buy")
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            if user_id in ADMINS:
                main_menu.add(InlineKeyboardButton("‚öôÔ∏è–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MP4 –∫–∞–∫ GIF-–∞–Ω–∏–º–∞—Ü–∏—é
            animation_path = "animation.mp4"
            if os.path.exists(animation_path):
                with open(animation_path, "rb") as animation:
                    await bot.send_animation(
                        chat_id=message.chat.id,
                        animation=animation,
                        caption="üç£ –•–æ—á–µ—à—å —Å–≤–µ–∂–∏—Ö —Å—É—à–µ–π? –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PSushi!",
                        reply_markup=main_menu
                    )
            else:
                await message.answer("üç£ –•–æ—á–µ—à—å —Å–≤–µ–∂–∏—Ö —Å—É—à–µ–π? –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PSushi!", reply_markup=main_menu)

        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            subscribe_button = InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton("üç£ PSushi | Channel", url="https://t.me/psushis")
            )
            await message.answer(
                "üç£ –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=subscribe_button
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e} –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw")







@dp.callback_query_handler(lambda call: call.data == 'buy')
async def buy(call: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup()
    subscription_options = [
        ("1 –¥–µ–Ω—å - 1$", "buy_1"),
        ("7 –¥–Ω–µ–π - 2.5$", "buy_7"),
        ("–ú–µ—Å—è—Ü - 5$", "buy_31"),
        ("–ù–∞–≤—Å–µ–≥–¥–∞ - 7$", "lifetime")
    ]
    for option_text, callback_data in subscription_options:
        markup.add(types.InlineKeyboardButton(option_text, callback_data=callback_data))
    
    markup.add(types.InlineKeyboardButton("‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start"))
    
    await bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="<b>üç£ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ @send\n –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

    
async def generate_payment_link(payment_system, amount):
    api_url = "https://pay.crypt.bot/api/createInvoice"
    headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
    data = {
        "asset": payment_system,
        "amount": float(amount)
    }

    response = requests.post(api_url, headers=headers, json=data)
    if response.status_code == 200:
        json_data = response.json()
        invoice = json_data.get("result")
        payment_link = invoice.get("pay_url")
        invoice_id = invoice.get("invoice_id")
        return payment_link, invoice_id
    else:
        return None, None

async def get_invoice_status(invoice_id):
    api_url = f"https://pay.crypt.bot/api/getInvoices?invoice_ids={invoice_id}"
    headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}

    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        json_data = response.json()
        if json_data.get("ok"):
            invoices = json_data.get("result")
            if invoices and 'items' in invoices and invoices['items']:
                status = invoices['items'][0]['status']
                payment_link = invoices['items'][0]['pay_url']
                amount = Decimal(invoices['items'][0]['amount'])
                value = invoices['items'][0]['asset']
                return status, payment_link, amount, value

    return None, None, None, None

async def get_exchange_rates():
    api_url = "https://pay.crypt.bot/api/getExchangeRates"
    headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}

    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        json_data = response.json()
        if json_data.get("ok"):
            return json_data["result"]
    return []

async def convert_to_crypto(amount, asset):
    rates = await get_exchange_rates()
    rate = None
    for exchange_rate in rates:
        if exchange_rate["source"] == asset and exchange_rate["target"] == 'USD':
            rate = Decimal(str(exchange_rate["rate"]))
            break

    if rate is None:
        raise Exception(f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è {asset} –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw</b>", parse_mode="HTML")

    amount = Decimal(str(amount))
    return amount / rate 
    
    
@dp.callback_query_handler(lambda call: call.data.startswith('buy_'))
async def subscription_duration_selected(call: types.CallbackQuery):
    duration = call.data
    markup = types.InlineKeyboardMarkup()
    currency_options = [
        ("USDT", "currency_USDT_" + duration),
        ("TON", "currency_TON_" + duration),
        ("NOT", "currency_NOT_" + duration),
        ("BTC", "currency_BTC_" + duration),
        ("ETH", "currency_ETH_" + duration)
    ]
    for option_text, callback_data in currency_options:
        markup.add(types.InlineKeyboardButton(option_text, callback_data=callback_data))
    
    markup.add(types.InlineKeyboardButton("‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start"))
    
    await bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="<b>üç£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å—É—à–µ–π:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )
    
@dp.callback_query_handler(lambda call: call.data.startswith('currency_'))
async def currency_selected(call: types.CallbackQuery):
    parts = call.data.split('_')
    currency = parts[1]
    duration_parts = parts[2:]
    duration = "_".join(duration_parts)

    amount = get_amount_by_duration(duration.replace('buy_', ''))

    try:
        converted_amount = await convert_to_crypto(amount, currency)
        payment_link, invoice_id = await generate_payment_link(currency, converted_amount)
        if payment_link and invoice_id:
            markup = types.InlineKeyboardMarkup()
            oplata = types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=f"{payment_link}")
            check_payment_button = types.InlineKeyboardButton("üí∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{call.from_user.id}:{invoice_id}")
            markup.add(oplata, check_payment_button)
            
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start"))
            
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=f"<b>üßæ –°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n{payment_link}",
                reply_markup=markup,
                parse_mode="HTML"
            )
        else:
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw</b>",
                parse_mode="HTML"
            )
    except Exception as e:
        await bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=str(e)
        )

def get_amount_by_duration(duration):
    prices = {
        '1': 1,
        '7': 2.5,
        '31': 5,
        'lifetime': 7
    }
    return prices.get(duration, 0)
    
log_chat_id = "-1002515067063"
    
  
@dp.callback_query_handler(lambda call: call.data.startswith('check_payment:'))
async def check_payment(call: types.CallbackQuery):
    _, user_id_str, invoice_id_str = call.data.split(':')
    user_id = int(user_id_str)
    invoice_id = invoice_id_str

    if user_id == call.from_user.id:
        status, payment_link, amount, value = await get_invoice_status(invoice_id)

        if status == "paid":
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            duration_days = get_duration_by_amount(amount)

            if duration_days > 0:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                activate_subscription(user_id, duration_days)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
                await bot.send_message(
                    log_chat_id,
                    f"<b>üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.\n"
                    f"üç£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {duration_days}\n"
                    f"‚ö° –¶–µ–Ω–∞: {amount} {value}</b>",
                    parse_mode="HTML"
                )

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.edit_message_caption(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    caption="<b>üç£ –û–ø–ª–∞—Ç–∞ —Å—É—à –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.</b>",
                    parse_mode="HTML"
                )
            else:
                await bot.edit_message_caption(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    caption="<b>‚ùå –û—à–∏–±–∫–∞. –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.</b>",
                    parse_mode="HTML"
                )
        else:
            await bot.answer_callback_query(call.id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw")
    else:
        await bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç—É –æ–ø–ª–∞—Ç—É.", show_alert=True)



async def add_subscription(user_id, expiration_date):
    """
    Add or update a subscription for a user in the database.

    :param user_id: Telegram user ID
    :param expiration_date: Expiration date of the subscription
    """
    async with aiosqlite.connect("subscriptions.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER PRIMARY KEY,
                expiration_date TEXT
            )
        """)
        await db.execute("""
            INSERT INTO subscriptions (user_id, expiration_date)
            VALUES (?, ?)
            ON CONFLICT(user_id) DO UPDATE SET expiration_date=excluded.expiration_date
        """, (user_id, expiration_date.strftime("%Y-%m-%d %H:%M:%S")))
        await db.commit()



def get_duration_by_amount(amount):
    amount = round(amount, 2)
    if amount <= 1:
        return 1  # 1 day
    elif amount <= 1:
        return 1  # 7 days
    elif amount <= 2.5:
        return 7  # 1 month (30 days)
    elif amount <= 5:
        return 32 * 32  # Lifetime subscription
    else:
        return 0  # Invalid amount

        
        



from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@dp.callback_query_handler(Text(equals="about_bot"))
async def about_bot(callback_query: types.CallbackQuery):
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
    about_text = (
        " <b>üç£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —Å —Å—É—à–∞–º–∏!</b> \n\n"
        "<b> –°–æ–∑–¥–∞—Ç–µ–ª—å @qwesmilw</b>\n"
        "‚Äî –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ @qwesmilw\n"
        "‚Äî –†–∞–±–æ—Ç—ã —Å —Å—É—à–∞–º–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç.\n\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_button = InlineKeyboardMarkup()
    back_button.add(InlineKeyboardButton(text="‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start"))

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (MP4 –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    try:
        with open("banner.mp4", "rb") as banner:
            # –û–±–Ω–æ–≤–ª—è–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.edit_media(
                media=types.InputMediaAnimation(banner, caption=about_text, parse_mode="HTML"),
                reply_markup=back_button  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            )
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            text=about_text,
            reply_markup=back_button  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        )


@dp.callback_query_handler(Text(equals="back_to_start"))
async def back_to_start(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(text="üç£ –ó–∞–∫–∞–∑–∞—Ç—å —Å—É—à–∏", callback_data="demolition"),
        InlineKeyboardButton("üìï –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton("‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="about_bot"),
        InlineKeyboardButton("üõçÔ∏è –¶–µ–Ω—ã –Ω–∞ —Å—É—à–∏", callback_data="buy")
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user_id in ADMINS:
        main_menu.add(InlineKeyboardButton("‚öôÔ∏è–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é
    with open("banner.mp4", "rb") as banner:
        await callback_query.message.edit_media(
            media=types.InputMediaAnimation(banner, caption="üç£ –•–æ—á–µ—à—å —Å–≤–µ–∂–∏—Ö —Å—É—à–µ–π? –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PSushi!", parse_mode="HTML"),
            reply_markup=main_menu  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )


dp.callback_query_handler(lambda c: c.data == "demolition")

@dp.callback_query_handler(lambda c: c.data == "demolition")
async def demolition_command(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not check_subscription(user_id):
        await callback_query.message.answer("üç£ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å—É—à–∏.")
        await callback_query.answer()
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state:
        await state.finish()

    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    cursor.execute("SELECT last_demolition FROM users WHERE telegram_id = ?", (user_id,))
    result = cursor.fetchone()
    last_demolition_time = result[0] if result else 0

    current_time = int(time.time())
    cooldown_time =0  # 1 —á–∞—Å

    if current_time - last_demolition_time < cooldown_time:
        remaining_time = cooldown_time - (current_time - last_demolition_time)
        await callback_query.message.answer(
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time // 60} –º–∏–Ω—É—Ç –∏ {remaining_time % 60} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–∫–∞–∑–æ–º —Å—É—à."
        )
        await callback_query.answer()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    cursor.execute("UPDATE users SET last_demolition = ? WHERE telegram_id = ?", (current_time, user_id))
    conn.commit()
    conn.close()

    # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ MP4-–∞–Ω–∏–º–∞—Ü–∏—é
    try:
        with open("profile_banner.mp4", "rb") as profile_banner:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            back_button = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            )
            await callback_query.message.edit_media(
                media=types.InputMediaAnimation(profile_banner, caption="*üç£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—É—à:*", parse_mode='Markdown'),
                reply_markup=back_button  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            )
    except FileNotFoundError:
        await callback_query.message.edit_text("‚ùå –§–∞–π–ª —Å –±–∞–Ω–Ω–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ 'profile_banner.mp4'.")

    await Form.waiting_for_demolition_link.set()
    await callback_query.answer()

    
@dp.message_handler(state=Form.waiting_for_demolition_link)
async def handle_demolition_link(message: types.Message, state: FSMContext):
    link = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏
    if not re.match(r'https://t.me/\w+/\d+', link):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: https://t.me/username/123")
        return

    reason = InputReportReasonSpam()  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ø—Ä–∏—á–∏–Ω—ã "—Å–ø–∞–º"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
    start_message = await message.answer("üç£ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—É—à. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    success_count, failure_count = await handle_demolition(link, message.from_user.id, reason)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET last_demolition = ? WHERE telegram_id = ?", (int(time.time()), message.from_user.id))
    conn.commit()
    conn.close()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
    await start_message.delete()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    profile_text = (
        f"*üü¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—É—à: 674*\n"
        f"*üî¥ –û—à–∏–±–∫–∏: 0*"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        with open("profile_banner.mp4", "rb") as profile_banner:
            await message.answer_animation(
                animation=profile_banner,
                caption=profile_text,
                parse_mode="Markdown"
            )
    except FileNotFoundError:
        await message.answer(" –û—à–∏–±–∫–∞: —Ñ–∞–π–ª profile_banner.mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await message.answer(profile_text, parse_mode="Markdown")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-–≥—Ä—É–ø–ø—É
    await bot.send_message(
        LOG_GROUP_ID,
        f"üç£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username or message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—É—à–∏ –Ω–∞: {link}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: –°–ø–∞–º\nüü¢ –£—Å–ø–µ—à–Ω–æ: 674\n üî¥ –ù–µ—É–¥–∞—á–Ω–æ: 0"
    )

    await state.finish()

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
async def process_message_link(link):
    try:
        match = re.match(r'https://t.me/(\w+)/(\d+)', link)
        if not match:
            raise ValueError("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: https://t.me/username/123")
        channel_username, message_id = match.groups()
        return channel_username, int(message_id)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e} –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw")
        return None, None

async def report_message(client, chat, msg_id, reason):
    try:
        await client(ReportRequest(
            peer=chat,
            id=[msg_id],
            reason=InputReportReasonSpam(),
            message="üç£ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∞–º"   
        ))
        logger.info(f"–°—É—à–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {msg_id}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—É—à: {e} –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw")
        return False


async def handle_demolition(link, user_id, reason):
    success_count = 0
    failure_count = 0
    invalid_sessions = []   

    complaints_per_account = 1

    channel_username, message_id = await process_message_link(link)
    if not channel_username:
        return success_count, failure_count

    async def process_session(session_file):
        nonlocal success_count, failure_count
        client = TelegramClient(f"sessions/{session_file}", API_ID, API_HASH)
        try:
            await client.connect()
            channel = await client.get_entity(channel_username)

            for _ in range(complaints_per_account):
                if await report_message(client, channel, message_id, reason):
                    success_count += 1
                else:
                    failure_count += 1
        except Exception as e:
            logger.error(f"üç£ –û—à–∏–±–∫–∞ —Å —Å—É—à–∞–º–∏ {session_file}: {e}")
            failure_count += 1

            if "The user has been deleted/deactivated" in str(e):
                invalid_sessions.append(session_file)
        finally:
            try:
                await client.disconnect()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {session_file}: {e}")

    tasks = []
    for session_file in os.listdir("sessions"):
        if session_file.endswith(".session"):
            tasks.append(process_session(session_file))

    await asyncio.gather(*tasks)

    return success_count, failure_count

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class MyState(StatesGroup):
    promo = State()   
    waiting_for_demolition_link = State()
    waiting_for_reason = State()
    
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return sqlite3.connect('database.db')

# –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def activate_subscription(user_id, duration):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    cursor.execute("""
        SELECT subscription_expiry_date FROM users WHERE telegram_id = ?
    """, (user_id,))
    result = cursor.fetchone()

    if result and result[0]:  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å
        current_expiry_date = datetime.strptime(result[0], '%Y-%m-%d')
        new_expiry_date = max(datetime.now(), current_expiry_date) + timedelta(days=duration)
    else:  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
        new_expiry_date = datetime.now() + timedelta(days=duration)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    cursor.execute("""
        UPDATE users
        SET subscription_status = 'active',
            subscription_expiry_date = ?
        WHERE telegram_id = ?
    """, (new_expiry_date.strftime('%Y-%m-%d'), user_id))

    conn.commit()
    conn.close()
    
def init_promocodes_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS promocodes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        code TEXT UNIQUE NOT NULL,
        days INTEGER NOT NULL,
        max_activations INTEGER NOT NULL,
        activations_count INTEGER DEFAULT 0
    )
    """)
    conn.commit()
    conn.close()

def activate_subscription_from_promocode(user_id, promocode):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if promocode['activations_count'] >= promocode['max_activations']:
        conn.close()
        return "‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑."

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    cursor.execute("""
        UPDATE promocodes
        SET activations_count = activations_count + 1
        WHERE code = ?
    """, (promocode['code'],))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    cursor.execute("SELECT subscription_status, subscription_expiry_date FROM users WHERE telegram_id = ?", (user_id,))
    result = cursor.fetchone()

    if result and result[0] == 'active':  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        expiry_date = datetime.strptime(result[1], '%Y-%m-%d') + timedelta(days=promocode['days'])
    else:  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–µ —Å —Ä–∞—Å—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –¥–∞—Ç—ã
        expiry_date = datetime.now() + timedelta(days=promocode['days'])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        UPDATE users
        SET subscription_status = 'active',
            subscription_expiry_date = ?
        WHERE telegram_id = ?
    """, (expiry_date.strftime('%Y-%m-%d'), user_id))

    conn.commit()
    conn.close()

    return f"üç£ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—É—à–∏ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {promocode['days']} –¥–Ω–µ–π!"

def check_promocode_validity(code):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM promocodes WHERE code = ?", (code,))
    promocode = cursor.fetchone()
    conn.close()

    if promocode:
        return {
            'code': promocode['code'],
            'days': promocode['days'],
            'max_activations': promocode['max_activations'],
            'activations_count': promocode['activations_count']
        }
    return None
    
# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(commands=['delpromo'])
async def delete_promocode(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in admin:
        await message.reply("<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>", parse_mode="HTML")
        return

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.split(" ")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if len(text) != 2:
        await message.reply(
            "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/delpromo <–∫–æ–¥>",
            parse_mode="HTML"
        )
        return

    promo_code = text[1]

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        cursor.execute("DELETE FROM promocodes WHERE code = ?", (promo_code,))
        if cursor.rowcount > 0:
            await message.reply(f"<b> ‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{promo_code}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", parse_mode="HTML")
        else:
            await message.reply(f"<b> ‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <code>{promo_code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")

        conn.commit()

    except sqlite3.Error as e:
        await message.reply(f"<b> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:</b> {e}", parse_mode="HTML")
    finally:
        conn.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(state=MyState.promo)
async def soso(message: types.Message, state: FSMContext):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        cursor.execute("SELECT * FROM promocodes WHERE code = ?", (message.text,))
        promocode = cursor.fetchone()

        if promocode:
            already_used = is_user_in_promocode(message.from_user.id, message.text)

            if already_used:
                await message.reply("<b> ‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.</b>", parse_mode="HTML")
            elif promocode[4] >= promocode[3]:
                await message.reply("<b> ‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.</b>", parse_mode="HTML")
            else:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                activate_subscription(message.from_user.id, promocode[2])

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
                used_by = promocode[5] or ""
                used_by = f"{used_by},{message.from_user.id}".strip(',')
                cursor.execute("""
                    UPDATE promocodes
                    SET activations_count = activations_count + 1, used_by = ?
                    WHERE code = ?
                """, (used_by, message.text))

                await message.reply(f"<b> üç£ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—É—à–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {promocode[2]} –¥–Ω–µ–π!</b>", parse_mode="HTML")
        else:
            await message.reply("<b> ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.</b>", parse_mode="HTML")
        
        conn.commit()

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.reply("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>", parse_mode="HTML")
    finally:
        await state.finish()
        conn.close()


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def initialize_database():
    with sqlite3.connect('database.db') as conn:
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS promocodes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE NOT NULL,
            days INTEGER NOT NULL,
            max_activations INTEGER NOT NULL,
            activations_count INTEGER DEFAULT 0,
            used_by TEXT
        )
        ''')
        
        conn.commit()
    print("–¢–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
def is_user_in_promocode(user_id, promo_code):
    with sqlite3.connect('database.db') as conn:
        cursor = conn.cursor()
        user_id_str = str(user_id)
        cursor.execute('''
        SELECT 1
        FROM promocodes
        WHERE code = ?
        AND (
            used_by = ? OR
            used_by LIKE ? OR
            used_by LIKE ? OR
            used_by LIKE ?
        )
        ''', (
            promo_code,
            user_id_str,
            f'{user_id_str},%',
            f'%,{user_id_str}',
            f'%,{user_id_str},%'
        ))
        return cursor.fetchone() is not None

@dp.callback_query_handler(lambda call: call.data == "back_to_start", state=Form.waiting_for_demolition_link)
async def back_to_start_from_demolition(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_id = callback_query.from_user.id
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(text="üç£ –ó–∞–∫–∞–∑–∞—Ç—å —Å—É—à–∏", callback_data="demolition"),
        InlineKeyboardButton("üìï –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton("‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="about_bot"),
        InlineKeyboardButton("üõçÔ∏è–¶–µ–Ω—ã –Ω–∞ —Å—É—à–∏", callback_data="buy")
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user_id in ADMINS:
        main_menu.add(InlineKeyboardButton("‚öôÔ∏è–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (MP4 –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    try:
        with open("banner.mp4", "rb") as banner:
            await callback_query.message.edit_media(
                media=types.InputMediaAnimation(banner, caption="üç£ –•–æ—á–µ—à—å —Å–≤–µ–∂–∏—Ö —Å—É—à–µ–π? –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PSushi!", parse_mode="HTML"),
                reply_markup=main_menu  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            )
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback_query.message.edit_text(
            text="üç£ –•–æ—á–µ—à—å —Å–≤–µ–∂–∏—Ö —Å—É—à–µ–π? –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PSushi!",
            parse_mode="HTML",
            reply_markup=main_menu
        )


@dp.callback_query_handler(lambda call: call.data == 'promo')
async def handle_inline_button_click2(call: types.CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await state.finish()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_profile")
    )

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é (MP4 –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    try:
        with open('banner.mp4', 'rb') as had:
            await call.message.edit_media(
                media=types.InputMediaAnimation(
                    media=had,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MP4-–∞–Ω–∏–º–∞—Ü–∏—é
                    caption="<b>‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç:</b>",  # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                    parse_mode="HTML"
                ),
                reply_markup=back_button  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            )
    except FileNotFoundError:
        await call.message.edit_text(
            text="<b>‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç:</b>",
            parse_mode="HTML",
            reply_markup=back_button
        )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await MyState.promo.set()


@dp.callback_query_handler(lambda call: call.data == "back_to_profile", state=MyState.promo)
async def back_to_profile(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞

    user_id = callback_query.from_user.id

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT subscription_status, subscription_expiry_date
        FROM users WHERE telegram_id = ?
    """, (user_id,))
    user_data = cursor.fetchone()

    cursor.execute("""
        SELECT 1 FROM whitelist WHERE user_id = ?
    """, (user_id,))
    is_in_whitelist = cursor.fetchone() is not None

    conn.close()

    if user_data:
        status, expiry_date = user_data
        try:
            if status == "active" and expiry_date:
                try:
                    expiry_datetime = datetime.strptime(expiry_date, "%Y-%m-%d %H:%M:%S")
                except ValueError:
                    expiry_datetime = datetime.strptime(expiry_date, "%Y-%m-%d")

                remaining_time = expiry_datetime - datetime.now()
                if remaining_time <= timedelta(seconds=0):
                    status = "inactive"
                    remaining_time_str = "–£ –≤–∞—Å –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏"
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    cursor.execute("""
                        UPDATE users SET subscription_expiry_date = NULL WHERE telegram_id = ?
                    """, (user_id,))
                    conn.commit()
                    conn.close()
                else:
                    remaining_time_str = format_remaining_time(remaining_time)

            elif status == "active":
                remaining_time_str = "00:00:00"
                remaining_time = timedelta(0)
            else:
                status = "inactive"
                remaining_time_str = "–£ –≤–∞—Å –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏"
                remaining_time = None

            profile_text = await create_profile_caption(user_id, status, remaining_time_str, is_in_whitelist)

        except ValueError:
            profile_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw"

    else:
        profile_text = "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        remaining_time = None

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    profile_keyboard = InlineKeyboardMarkup()
    profile_keyboard.row(
        InlineKeyboardButton(text="‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="ruco"),
        InlineKeyboardButton(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")
    )
    profile_keyboard.add(
        InlineKeyboardButton(text="üßæ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", callback_data="white"),
        InlineKeyboardButton(text="‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start")  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    )

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ/–∞–Ω–∏–º–∞—Ü–∏–µ–π, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    try:
        with open("profile_banner.mp4", "rb") as profile_banner:
            await callback_query.message.edit_media(
                media=types.InputMediaAnimation(profile_banner, caption=profile_text, parse_mode="HTML"),
                reply_markup=profile_keyboard
            )
    except FileNotFoundError:
        await callback_query.message.edit_text(profile_text, parse_mode="HTML", reply_markup=profile_keyboard)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if remaining_time is not None:
        await update_subscription(callback_query.message, user_id, remaining_time, is_in_whitelist)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(commands=['genpromo'])
async def promo_set(message: types.Message):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if int(user_id) not in admin:
        await message.reply("<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>", parse_mode="HTML")
        return

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.split(" ")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(text) < 4:
        await message.reply(
            "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n"
            "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/genpromo <–∫–æ–¥> <–¥–Ω–∏> <–º–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π>",
            parse_mode="HTML"
        )
        return

    promo_code, days, activations = text[1], int(text[2]), int(text[3])
    try:
        cursor.execute(
            "INSERT INTO promocodes (code, days, max_activations) VALUES (?, ?, ?)",
            (promo_code, days, activations)
        )
        await message.answer("<b> ‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>", parse_mode="HTML")
    except sqlite3.IntegrityError:
        await message.answer("<b> ‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"<b> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:</b> {e}")
    finally:
        conn.commit()
        conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(state=MyState.promo)
async def soso(message: types.Message, state: FSMContext):
    try:
        with sqlite3.connect('database.db') as conn:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
            cursor.execute("SELECT * FROM promocodes WHERE code = ?", (message.text,))
            promocode = cursor.fetchone()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            cursor.execute("SELECT expiration_date FROM subscriptions WHERE user_id = ?", (message.from_user.id,))
            expiration_date = cursor.fetchone()

            expiration_date = datetime.strptime(expiration_date[0], '%Y-%m-%d %H:%M:%S') if expiration_date else datetime.now()

            if promocode:
                if is_user_in_promocode(message.from_user.id, message.text):
                    await message.reply("<b>‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.</b>", parse_mode="HTML")
                elif promocode[4] >= promocode[3]:
                    await message.reply("<b>‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.</b>", parse_mode="HTML")
                else:
                    # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    new_expiration_date = expiration_date + timedelta(days=promocode[2])
                    cursor.execute(
                        "INSERT OR REPLACE INTO subscriptions (user_id, expiration_date) VALUES (?, ?)",
                        (message.from_user.id, new_expiration_date.strftime('%Y-%m-%d %H:%M:%S'))
                    )

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
                    used_by = promocode[5] or ""
                    used_by = f"{used_by},{message.from_user.id}".strip(',')
                    cursor.execute(
                        "UPDATE promocodes SET activations_count = activations_count + 1, used_by = ? WHERE code = ?",
                        (used_by, message.text)
                    )

                    await message.reply(f"<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—É—à–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {promocode[2]} –¥–Ω–µ–π!</b>", parse_mode="HTML")
                    await bot.send_message(
                        log_chat_id,
                        f" <a href='tg:/openmessage?user_id={message.from_user.id}'>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤–≤–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥ <code>{message.text}</code>\n"
                        f"<b>üç£ –î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b> <code>{promocode[2]}</code>\n"
                        f"<b>üßæ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{promocode[3] - (promocode[4] + 1)}</code>",
                        parse_mode="HTML"
                    )
            else:
                await message.reply("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.</b>", parse_mode="HTML")

    except sqlite3.Error as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.reply("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>", parse_mode="HTML")
    finally:
        await state.finish()
        
def initialize_database():
    conn = get_db_connection()
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É whitelist, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS whitelist (
            user_id INTEGER PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

async def get_balance(user_id):
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    conn = sqlite3.connect("users.db")  # –∏–ª–∏ –≤–∞—à–∞ –ë–î
    cursor = conn.cursor()
    cursor.execute("""
        SELECT balance FROM users WHERE telegram_id = ?
    """, (user_id,))
    user_data = cursor.fetchone()

    conn.close()

    if user_data:
        return user_data[0]
    else:
        return 0  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –∫–∞–∫ –±–∞–ª–∞–Ω—Å

def create_users_table():
    # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
    conn = sqlite3.connect("users.db")  # –ò–º—è –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            subscription_status TEXT,
            subscription_expiry_date TEXT,
            balance REAL
        )
    """)
    
    conn.commit()
    conn.close()

# –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
create_users_table()



from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

@dp.callback_query_handler(Text(equals="profile"))
async def profile_command(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT subscription_status, subscription_expiry_date
        FROM users WHERE telegram_id = ?
    """, (user_id,))
    user_data = cursor.fetchone()

    cursor.execute("""
        SELECT 1 FROM whitelist WHERE user_id = ?
    """, (user_id,))
    is_in_whitelist = cursor.fetchone() is not None

    conn.close()

    if user_data:
        status, expiry_date = user_data
        try:
            if status == "active" and expiry_date:
                try:
                    expiry_datetime = datetime.strptime(expiry_date, "%Y-%m-%d %H:%M:%S")
                except ValueError:
                    expiry_datetime = datetime.strptime(expiry_date, "%Y-%m-%d")

                remaining_time = expiry_datetime - datetime.now()
                if remaining_time <= timedelta(seconds=0):
                    status = "inactive"
                    remaining_time_str = "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    cursor.execute("""
                        UPDATE users SET subscription_expiry_date = NULL WHERE telegram_id = ?
                    """, (user_id,))
                    conn.commit()
                    conn.close()
                else:
                    remaining_time_str = format_remaining_time(remaining_time)

            elif status == "active":
                remaining_time_str = "00:00:00"
                remaining_time = timedelta(0)
            else:
                status = "inactive"
                remaining_time_str = "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                remaining_time = None

            profile_text = await create_profile_caption(user_id, status, remaining_time_str, is_in_whitelist)

        except ValueError:
            profile_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw"

    else:
        profile_text = "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        remaining_time = None

    profile_keyboard = InlineKeyboardMarkup()
    profile_keyboard.row(
        InlineKeyboardButton(text="‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="ruco"),
        InlineKeyboardButton(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")
    )
    profile_keyboard.add(
        InlineKeyboardButton(text="üßæ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", callback_data="white"),
        InlineKeyboardButton(text="‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º MP4-–∞–Ω–∏–º–∞—Ü–∏—é
    try:
        with open("profile_banner.mp4", "rb") as profile_mp4:
            await callback_query.message.edit_media(
                media=types.InputMediaAnimation(profile_mp4, caption=profile_text, parse_mode="HTML"),
                reply_markup=profile_keyboard
            )
    except FileNotFoundError:
        await callback_query.message.edit_text(profile_text, parse_mode="HTML", reply_markup=profile_keyboard)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    if remaining_time is not None:
        last_caption = profile_text  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `last_caption`

        while remaining_time > timedelta(seconds=0):
            await asyncio.sleep(1)
            remaining_time -= timedelta(seconds=1)

            remaining_time_str = format_remaining_time(remaining_time)
            new_caption = await create_profile_caption(user_id, "active", remaining_time_str, is_in_whitelist)

            if new_caption != last_caption:  # –ò–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                try:
                    await callback_query.message.edit_caption(caption=new_caption, reply_markup=profile_keyboard)
                    last_caption = new_caption
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ
                
            await callback_query.message.edit_reply_markup(reply_markup=profile_keyboard)


    while remaining_time > timedelta(seconds=0):
        await asyncio.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        remaining_time -= timedelta(seconds=1)

        remaining_time_str = format_remaining_time(remaining_time)
        new_caption = await create_profile_caption(user_id, "active", remaining_time_str, is_in_whitelist)

        if new_caption != last_caption:  # –ò–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            try:
                await message.edit_caption(caption=new_caption, reply_markup=profile_keyboard)
                last_caption = new_caption
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ
            
        await message.edit_reply_markup(reply_markup=profile_keyboard)


def format_remaining_time(remaining_time):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    """
    days = remaining_time.days
    hours, remainder = divmod(remaining_time.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    if days > 0:
        return f"{days} –¥–Ω., {hours:02}:{minutes:02}:{seconds:02}"
    else:
        return f"{hours:02}:{minutes:02}:{seconds:02}"


async def create_profile_caption(user_id, status, remaining_time_str, is_in_whitelist):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –±–∞–ª–∞–Ω—Å.
    """
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    balance = await get_balance(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º
    profile_text = (
        f"üôÇ –í–∞—à ID: {user_id}\n"
        f"üç£ –ü–æ–¥–ø–∏—Å–∫–∞: {'–ê–∫—Ç–∏–≤–Ω–∞' if status == 'active' else '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}\n"  
        f"‚ùì–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time_str}\n"  
        f"üßæ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {'–ï—Å—Ç—å' if is_in_whitelist else '–ù–µ—Ç'}\n"
    )
    
    return profile_text



async def get_balance(user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    async with aiosqlite.connect("subscriptions.db") as db:
        cursor = await db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        result = await cursor.fetchone()
        if result:
            return round(result[0], 2)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    return 0.0  # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0



@dp.callback_query_handler(Text(equals="profile"))
async def profile_command(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT subscription_status, subscription_expiry_date
        FROM users WHERE telegram_id = ?
    """, (user_id,))
    user_data = cursor.fetchone()

    cursor.execute("""
        SELECT 1 FROM whitelist WHERE user_id = ?
    """, (user_id,))
    is_in_whitelist = cursor.fetchone() is not None

    conn.close()

    if user_data:
        status, expiry_date = user_data
        try:
            if status == "active" and expiry_date:
                try:
                    expiry_datetime = datetime.strptime(expiry_date, "%Y-%m-%d %H:%M:%S")
                except ValueError:
                    expiry_datetime = datetime.strptime(expiry_date, "%Y-%m-%d")

                remaining_time = expiry_datetime - datetime.now()
                if remaining_time <= timedelta(seconds=0):
                    status = "inactive"  
                    remaining_time_str = "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"  
                    cursor.execute("""
                        UPDATE users SET subscription_expiry_date = NULL WHERE telegram_id = ?
                    """, (user_id,))
                    conn.commit()

                else:
                    remaining_time_str = format_remaining_time(remaining_time)

            elif status == "active":
                remaining_time_str = "00:00:00"  
                remaining_time = timedelta(0)  
            else:
                status = "inactive"  
                remaining_time_str = "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"  
                remaining_time = None 

            profile_text = await create_profile_caption(user_id, status, remaining_time_str, is_in_whitelist)

        except ValueError:
            profile_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @qwesmilw"

    else:
        profile_text = "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        remaining_time = None  

    profile_keyboard = InlineKeyboardMarkup()
    profile_keyboard.add(
    )
    profile_keyboard.row(
        InlineKeyboardButton(text="‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="ruco"),
        InlineKeyboardButton(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")
    )
    profile_keyboard.add(
        InlineKeyboardButton(text="üßæ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", callback_data="white"),
        InlineKeyboardButton(text="‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º MP4-–∞–Ω–∏–º–∞—Ü–∏—é
    try:
        with open("profile_banner.mp4", "rb") as profile_mp4:
            await callback_query.message.edit_media(
                media=types.InputMediaAnimation(profile_mp4, caption=profile_text, parse_mode="HTML"),
                reply_markup=profile_keyboard
            )
    except FileNotFoundError:
        await callback_query.message.edit_text(profile_text, parse_mode="HTML", reply_markup=profile_keyboard)

    if remaining_time is not None:
        await update_subscription(callback_query.message, user_id, remaining_time, is_in_whitelist)


async def update_subscription(message, user_id, remaining_time, is_in_whitelist):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.
    """
    profile_keyboard = InlineKeyboardMarkup()
    profile_keyboard.add(
    )
    profile_keyboard.row(
        InlineKeyboardButton(text="‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="ruco"),
        InlineKeyboardButton(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")
    )
    profile_keyboard.add(
        InlineKeyboardButton(text="üßæ –ë–µ–ª—ã–π —Å–ø—Å–æ–∫", callback_data="white"),
        InlineKeyboardButton(text="‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start")
    )

    last_caption = None  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–¥–ø–∏—Å—å, —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

    while remaining_time > timedelta(seconds=0):
        await asyncio.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        remaining_time -= timedelta(seconds=1)

        remaining_time_str = format_remaining_time(remaining_time)
        new_caption = await create_profile_caption(user_id, "active", remaining_time_str, is_in_whitelist)

        if new_caption != last_caption:  # –ò–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            try:
                await message.edit_caption(caption=new_caption, reply_markup=profile_keyboard)
                last_caption = new_caption
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ

        await message.edit_reply_markup(reply_markup=profile_keyboard)
    

def format_remaining_time(remaining_time):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    """
    days = remaining_time.days
    hours, remainder = divmod(remaining_time.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    if days > 0:
        return f"{days} –¥–Ω., {hours:02}:{minutes:02}:{seconds:02}"
    else:
        return f"{hours:02}:{minutes:02}:{seconds:02}"

    
    return profile_text


# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def add_balance(user_id, amount):
    """
    –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    async with aiosqlite.connect("subscriptions.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance REAL
            )
        """)
        await db.execute("""
            INSERT INTO users (user_id, balance)
            VALUES (?, ?)
            ON CONFLICT(user_id) DO UPDATE SET balance=excluded.balance
        """, (user_id, float(amount)))
        await db.commit()


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
async def convert_to_crypto(amount, asset):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ USD.
    """
    try:
        rates = await get_exchange_rates()
        
        # –ü–µ—á–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –¥–µ–±–∞–≥–∞
        print(f"üí∏ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã: {rates}")
        
        rate = None
        available_assets = [rate["source"] for rate in rates]  # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if asset.upper() not in available_assets:
            raise ValueError(f"‚ùå –í–∞–ª—é—Ç–∞ {asset.upper()} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
        
        # –ò—â–µ–º –∫—É—Ä—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
        for exchange_rate in rates:
            if exchange_rate["source"].upper() == asset.upper() and exchange_rate["target"] == 'USD':
                rate = Decimal(str(exchange_rate["rate"]))
                break

        if rate is None:
            raise ValueError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è {asset.upper()}.")
        
        amount = Decimal(str(amount))
        return amount / rate
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ convert_to_crypto: {e}")
        raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {amount} {asset.upper()}: {str(e)}")



async def get_exchange_rates():
    """
    –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ —Å API.
    """
    try:
        api_url = "https://pay.crypt.bot/api/getExchangeRates"
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        response = requests.get(api_url, headers=headers)
        
        if response.status_code == 200:
            json_data = response.json()
            if json_data.get("ok"):
                return json_data["result"]
        return []
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞: {e}")
        return []


async def get_payment_amount(invoice_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ invoice_id.
    """
    async with aiosqlite.connect("subscriptions.db") as db:
        cursor = await db.execute("SELECT amount FROM payments WHERE invoice_id = ?", (invoice_id,))
        result = await cursor.fetchone()
        if result:
            return Decimal(result[0])
    return Decimal(0)


# –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
async def check_payment_status(invoice_id):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.
    """
    try:
        api_url = f"https://pay.crypt.bot/api/getPaymentStatus?invoice_id={invoice_id}"
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        response = requests.get(api_url, headers=headers)
        
        if response.status_code == 200:
            json_data = response.json()
            if json_data.get("ok"):
                status = json_data["result"]["status"]
                return status
        return "failed"
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return "failed"


# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query_handler(lambda call: call.data.startswith('check_payment:'))
async def check_payment(call: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ invoice_id –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.
    """
    _, user_id_str, invoice_id_str = call.data.split(':')
    user_id = int(user_id_str)
    invoice_id = invoice_id_str

    if user_id == call.from_user.id:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        status, payment_link, amount, value = await get_invoice_status(invoice_id)

        if status == "paid":
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å—É–º–º–µ
            duration_days = get_duration_by_amount(amount)

            if duration_days > 0:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                activate_subscription(user_id, duration_days)

                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                await bot.send_message(
                    log_chat_id,
                    f"<b>üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.\n"
                    f"üç£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {duration_days}\n"
                    f"üõçÔ∏è –¶–µ–Ω–∞: {amount} {value}</b>",
                    parse_mode="HTML"
                )

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
                await bot.edit_message_caption(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    caption="<b>üç£ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—É—à–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.</b>",
                    parse_mode="HTML"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
                await add_balance(user_id, amount)
                await call.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {amount} USD.")
            else:
                await bot.edit_message_caption(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    caption="<b>‚ùå –û—à–∏–±–∫–∞. –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.</b>",
                    parse_mode="HTML"
                )
        else:
            await bot.answer_callback_query(call.id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç—É –æ–ø–ª–∞—Ç—É.", show_alert=True)


# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.callback_query_handler(lambda call: call.data == "recharge_balance")
async def recharge_balance(call: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
    """
    user_id = call.from_user.id
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ USDT", callback_data="recharge_usdt"))
    markup.add(InlineKeyboardButton(text="‚ö°–ù–∞–∑–∞–¥", callback_data="profile"))
    
    await call.message.edit_caption(
        caption="üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
        reply_markup=markup
    )


@dp.callback_query_handler(lambda call: call.data.startswith('recharge_'))
async def recharge_currency(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ.
    """
    currency = call.data.split('_')[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'usdt'
    
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ {currency.upper()} (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.01, 0.5, 1):")
    await dp.register_message_handler(lambda message: process_top_up_currency(message, currency, call.from_user.id), state="*")


async def process_top_up_currency(message: types.Message, currency: str, user_id: int):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –∏ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É.
    """
    try:
        amount = float(message.text)
        
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        converted_amount = await convert_to_crypto(amount, currency)
        payment_link, invoice_id = await generate_payment_link(currency, converted_amount)
        
        if payment_link and invoice_id:
            markup = InlineKeyboardMarkup()
            oplata = InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=f"{payment_link}")
            check_payment_button = InlineKeyboardButton("üí∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_balance:{user_id}:{invoice_id}")
            markup.add(oplata, check_payment_button)
            markup.add(InlineKeyboardButton("‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start"))
            
            await message.answer(
                f"<b>–°—á—ë—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{payment_link}",
                reply_markup=markup,
                parse_mode="HTML"
            )
        else:
            await message.answer("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", parse_mode="HTML")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@dp.callback_query_handler(lambda call: call.data.startswith('currency_'))
async def currency_selected(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    parts = call.data.split('_')
    currency = parts[1]
    amount = parts[2]

    try:
        converted_amount = await convert_to_crypto(amount, currency)
        payment_link, invoice_id = await generate_payment_link(currency, converted_amount)

        if payment_link and invoice_id:
            markup = InlineKeyboardMarkup()
            oplata = InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=f"{payment_link}")
            check_payment_button = InlineKeyboardButton("üí∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_balance:{call.from_user.id}:{invoice_id}")
            markup.add(oplata, check_payment_button)
            markup.add(InlineKeyboardButton("‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start"))
            
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=f"<b>üí∏ –°—á—ë—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{payment_link}",
                reply_markup=markup,
                parse_mode="HTML"
            )
        else:
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
                parse_mode="HTML"
            )
    except Exception as e:
        await bot.answer_callback_query(call.id, f"<b>{str(e)}</b>", parse_mode="HTML")

    



@dp.callback_query_handler(lambda call: call.data == 'white')
async def buy_whitelist(call: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup()
    currency_options = [
        ("USDT", "whitelist_USDT"),
        ("TON", "whitelist_TON"),
        ("NOT", "whitelist_NOT"),
        ("BTC", "whitelist_BTC"),
        ("ETH", "whitelist_ETH")
    ]
    for option_text, callback_data in currency_options:
        markup.add(types.InlineKeyboardButton(option_text, callback_data=callback_data))
    
    markup.add(types.InlineKeyboardButton("‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start"))
    
    await bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="<b>üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ (1.5$):</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda call: call.data.startswith('whitelist_'))
async def whitelist_currency_selected(call: types.CallbackQuery):
    currency = call.data.split('_')[1]
    try:
        amount = 1.5
        converted_amount = await convert_to_crypto(amount, currency)
        payment_link, invoice_id = await generate_payment_link(currency, converted_amount)
        if payment_link and invoice_id:
            markup = types.InlineKeyboardMarkup()
            pay_button = types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=f"{payment_link}")
            check_button = types.InlineKeyboardButton("üí∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_whitelist:{call.from_user.id}:{invoice_id}")
            markup.add(pay_button, check_button)
            
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=f"<b>üí∏ –°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ (1.5$):</b>\n{payment_link}",
                reply_markup=markup,
                parse_mode="HTML"
            )
        else:
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
                parse_mode="HTML"
            )
    except Exception as e:
        await bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=str(e)
        )

@dp.callback_query_handler(lambda call: call.data.startswith('check_whitelist:'))
async def check_whitelist_payment(call: types.CallbackQuery):
    _, user_id_str, invoice_id = call.data.split(':')
    user_id = int(user_id_str)

    if user_id == call.from_user.id:
        status, payment_link, amount, value = await get_invoice_status(invoice_id)
        if status == "paid" and round(amount, 2) == 1.5:
            await add_to_whitelist(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞–π—Ç–ª–∏—Å—Ç
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="<b>‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.</b>",
                parse_mode="HTML"
            )
            await bot.send_message(log_chat_id, f"<büí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞ 1.5$.</b>", parse_mode="HTML")
        else:
            await bot.answer_callback_query(call.id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Å—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    else:
        await bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç—É –æ–ø–ª–∞—Ç—É.", show_alert=True)

async def add_to_whitelist(user_id):
    async with aiosqlite.connect("subscriptions.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS whitelist (
                user_id INTEGER PRIMARY KEY
            )
        """)
        await db.execute("""
            INSERT OR IGNORE INTO whitelist (user_id) VALUES (?)
        """, (user_id,))
        await db.commit()


@dp.callback_query_handler(Text(equals="ruco"))
async def send_guidance(callback_query: types.CallbackQuery):
    new_text = "–ü—Ä–∏–≤–µ—Ç! [‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è](https://rt.pornhub.com)"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" (–≤–µ–¥–µ—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é)
    back_button = InlineKeyboardMarkup()
    back_button.add(InlineKeyboardButton(text="‚ö°–ù–∞–∑–∞–¥", callback_data="profile"))

    try:
        if callback_query.message.animation:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç GIF (–∞–Ω–∏–º–∞—Ü–∏—é)
            await callback_query.message.edit_media(
                media=types.InputMediaAnimation(
                    media=callback_query.message.animation.file_id,
                    caption=new_text,
                    parse_mode="Markdown"
                ),
                reply_markup=back_button
            )
        elif callback_query.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            await callback_query.message.edit_media(
                media=types.InputMediaPhoto(
                    media=callback_query.message.photo[0].file_id,
                    caption=new_text,
                    parse_mode="Markdown"
                ),
                reply_markup=back_button
            )
        else:
            # –ï—Å–ª–∏ –Ω–∏ —Ñ–æ—Ç–æ, –Ω–∏ GIF –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback_query.message.edit_text(
                text=new_text,
                parse_mode="Markdown",
                reply_markup=back_button
            )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@dp.callback_query_handler(Text(equals="profile"))
async def profile_command(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT subscription_status, subscription_expiry_date
        FROM users WHERE telegram_id = ?
    """, (user_id,))
    user_data = cursor.fetchone()

    cursor.execute("""
        SELECT 1 FROM whitelist WHERE user_id = ?
    """, (user_id,))
    is_in_whitelist = cursor.fetchone() is not None

    conn.close()

    if user_data:
        status, expiry_date = user_data
        try:
            if status == "active" and expiry_date:
                try:
                    expiry_datetime = datetime.strptime(expiry_date, "%Y-%m-%d %H:%M:%S")
                except ValueError:
                    expiry_datetime = datetime.strptime(expiry_date, "%Y-%m-%d")

                remaining_time = expiry_datetime - datetime.now()
                if remaining_time <= timedelta(seconds=0):
                    status = "inactive"
                    remaining_time_str = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                else:
                    remaining_time_str = format_remaining_time(remaining_time)
            else:
                status = "inactive"
                remaining_time_str = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"

            profile_text = await create_profile_caption(user_id, status, remaining_time_str, is_in_whitelist)

        except ValueError:
            profile_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è."

    else:
        profile_text = "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    profile_keyboard = InlineKeyboardMarkup()
    profile_keyboard.row(
        InlineKeyboardButton(text="‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="ruco"),
        InlineKeyboardButton(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")
    )
    profile_keyboard.add(
        InlineKeyboardButton(text="üßæ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", callback_data="white"),
        InlineKeyboardButton(text="‚ö°–ù–∞–∑–∞–¥", callback_data="back_to_start")  
    )

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç GIF (mp4), –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if callback_query.message.animation:
        await callback_query.message.edit_media(
            media=types.InputMediaAnimation(
                media=callback_query.message.animation.file_id,
                caption=profile_text,
                parse_mode="Markdown"
            ),
            reply_markup=profile_keyboard
        )
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    elif callback_query.message.photo:
        await callback_query.message.edit_media(
            media=types.InputMediaPhoto(
                media=callback_query.message.photo[0].file_id,
                caption=profile_text,
                parse_mode="Markdown"
            ),
            reply_markup=profile_keyboard
        )
    # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    else:
        await callback_query.message.edit_text(
            text=profile_text,
            parse_mode="Markdown",
            reply_markup=profile_keyboard
        )

    

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
admin_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton(text="üç£ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription"),
    InlineKeyboardButton(text="üç£ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="remove_subscription"),
    InlineKeyboardButton(text="üç£ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="block_user"),
    InlineKeyboardButton(text="üç£ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unblock_user"),
    InlineKeyboardButton(text="üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats"),
    InlineKeyboardButton(text="üßæ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_message")
)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(Text(equals="broadcast_message"))
async def broadcast_start(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await callback_query.message.answer("üç£ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await Form.waiting_for_broadcast_message.set()

@dp.message_handler(state=Form.waiting_for_broadcast_message)
async def broadcast_process(message: types.Message, state: FSMContext):
    broadcast_text = message.text
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT telegram_id FROM users")
    users = cursor.fetchall()
    conn.close()

    success_count = 0
    failed_count = 0

    for user in users:
        try:
            await bot.send_message(user[0], broadcast_text)
            success_count += 1
        except Exception:
            failed_count += 1

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}"
    )
    await state.finish()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@dp.callback_query_handler(Text(equals="admin_panel"))
async def admin_panel(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS:
        await callback_query.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await callback_query.message.answer("‚öôÔ∏è–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(Text(equals="remove_subscription"))
async def remove_subscription_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üç£ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–±–∏—Ä–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:")
    await Form.waiting_for_remove_subscription.set()

@dp.message_handler(state=Form.waiting_for_remove_subscription)
async def remove_subscription_process(message: types.Message, state: FSMContext):
    try:
        target_id = int(message.text)
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET subscription_status = 'none' WHERE telegram_id = ?", (target_id,))
        conn.commit()
        conn.close()

        await message.answer(f"üç£ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–Ω–∞.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    finally:
        await state.finish()

# –•—ç–Ω–¥–ª–µ—Ä –î–æ–±–∞–≤–ª–µ–Ω–∏—è –ü–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(Text(equals="add_subscription"))
async def add_subscription_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üç£ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö, –ø—Ä–∏–º–µ—Ä: 7021577409 30):")
    await Form.waiting_for_add_subscription.set()

@dp.message_handler(state=Form.waiting_for_add_subscription)
async def add_subscription_process(message: types.Message, state: FSMContext):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
        target_id, days = map(int, message.text.split())

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–Ω–∏ –±–æ–ª—å—à–µ 0
        if days <= 0:
            await message.answer("üç£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        expiry_date = datetime.now() + timedelta(days=days)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        cursor.execute("""
            UPDATE users 
            SET subscription_status = 'active', subscription_expiry_date = ?
            WHERE telegram_id = ?
        """, (expiry_date.strftime("%Y-%m-%d %H:%M:%S"), target_id))
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await message.answer(f"üç£ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")
    except ValueError:
        await message.answer("üç£ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    finally:
        await state.finish()


# –•—ç–Ω–¥–ª–µ—Ä –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(Text(equals="block_user"))
async def block_user_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üç£ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
    await Form.waiting_for_block_user_id.set()

@dp.message_handler(state=Form.waiting_for_block_user_id)
async def block_user_process(message: types.Message, state: FSMContext):
    try:
        target_id = int(message.text)
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_blocked = 1 WHERE telegram_id = ?", (target_id,))
        conn.commit()
        conn.close()

        await message.answer(f"üç£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    finally:
        await state.finish()

# –•—ç–Ω–¥–ª–µ—Ä –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(Text(equals="unblock_user"))
async def unblock_user_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üç£ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
    await Form.waiting_for_block_user_id.set()

@dp.message_handler(state=Form.waiting_for_block_user_id)
async def unblock_user_process(message: types.Message, state: FSMContext):
    try:
        target_id = int(message.text)
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_blocked = 0 WHERE telegram_id = ?", (target_id,))
        conn.commit()
        conn.close()

        await message.answer(f"üç£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError:
        await message.answer("üç£ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    finally:
        await state.finish()

# –•—ç–Ω–¥–ª–µ—Ä –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query_handler(Text(equals="view_stats"))
async def view_stats(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE subscription_status = 'none'")
    without_subs = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE subscription_status = 'active'")
    with_subs = cursor.fetchone()[0]
    conn.close()

    stats_text = (
        f"**üç£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üç£**:\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: {without_subs}\n"
        f"–° –ø–æ–¥–ø–∏—Å–∫–æ–π: {with_subs}"
    )
    await callback_query.message.answer(stats_text, parse_mode="Markdown")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
if __name__ == '__main__':
    init_db()
    initialize_database()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    executor.start_polling(dp, skip_updates=True)
